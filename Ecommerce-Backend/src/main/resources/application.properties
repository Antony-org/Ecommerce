spring.application.name=Ecommerce
server.port=9002

#MySQL
spring.datasource.url=${SQL_DB_URL}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.username=${SQL_DB_USERNAME}
spring.datasource.password=${SQL_DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
# Enable Hibernate second-level cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory

# Enable query caching
spring.jpa.properties.hibernate.cache.use_query_cache=true




# MongoDB connection URI
spring.data.mongodb.database=${MONGO_DATABASE}
spring.data.mongodb.uri=mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_CLUSTER}

###  Payment  ###
payment-secret-key=${PAYMENT_SECRET_KEY}
payment-public-key=${PAYMENT_PUBLIC_KEY}
payment-intention-url=${PAYMENT_INTENTION_URL}
payment-checkout-url=${PAYMENT_CHECKOUT_URL}

#base End Point initialization
spring.security.user.name=user
spring.security.user.password=pass

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.boot.autoconfigure.security= info

# Login with Google
spring.security.oauth2.client.registration.google.client-id=516688200027-a5ouf65hcr858rf3lse81mg6q4lffg0h.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:9002/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Google OIDC configuration for JWT token validation
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://accounts.google.com
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# http://localhost:8080/oauth2/authorization/google
#http://localhost:8082

spring.web.resources.static-locations=classpath:/static/
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

logging.level.org.thymeleaf=DEBUG


###  Order Service ###
order.scheduler.fixedRate=900000

ui.base.url=${UI_BASE_URL}